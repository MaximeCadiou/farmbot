/*
 * generated by Xtext 2.15.0
 */
package xtext.farmbot.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyFarmbotGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FarmbotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.Farmbot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFarmbotAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_0 = (RuleCall)cInstructionsAssignment_1.eContents().get(0);
		
		//Farmbot:
		//	{Farmbot} instructions+=Instruction+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Farmbot} instructions+=Instruction+
		public Group getGroup() { return cGroup; }
		
		//{Farmbot}
		public Action getFarmbotAction_0() { return cFarmbotAction_0; }
		
		//instructions+=Instruction+
		public Assignment getInstructionsAssignment_1() { return cInstructionsAssignment_1; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_0() { return cInstructionsInstructionParserRuleCall_1_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceInstructionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSequenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Instruction:
		//	SequenceInstruction | Sequence | Command;
		@Override public ParserRule getRule() { return rule; }
		
		//SequenceInstruction | Sequence | Command
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SequenceInstruction
		public RuleCall getSequenceInstructionParserRuleCall_0() { return cSequenceInstructionParserRuleCall_0; }
		
		//Sequence
		public RuleCall getSequenceParserRuleCall_1() { return cSequenceParserRuleCall_1; }
		
		//Command
		public RuleCall getCommandParserRuleCall_2() { return cCommandParserRuleCall_2; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScheduleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListPeripheralsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListSequencesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Command:
		//	Schedule | ListPeripherals | ListSequences;
		@Override public ParserRule getRule() { return rule; }
		
		//Schedule | ListPeripherals | ListSequences
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Schedule
		public RuleCall getScheduleParserRuleCall_0() { return cScheduleParserRuleCall_0; }
		
		//ListPeripherals
		public RuleCall getListPeripheralsParserRuleCall_1() { return cListPeripheralsParserRuleCall_1; }
		
		//ListSequences
		public RuleCall getListSequencesParserRuleCall_2() { return cListSequencesParserRuleCall_2; }
	}
	public class SequenceCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.SequenceCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTurnOnParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTurnOffParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMoveRelativeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFindHomeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMoveAbsoluteParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExecuteSequenceParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cWaitParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSendMessageParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRunFarmwareParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cTakePhotoParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//SequenceCommand:
		//	TurnOn | TurnOff | MoveRelative | FindHome | MoveAbsolute | ExecuteSequence | Wait | SendMessage | RunFarmware |
		//	TakePhoto;
		@Override public ParserRule getRule() { return rule; }
		
		//TurnOn | TurnOff | MoveRelative | FindHome | MoveAbsolute | ExecuteSequence | Wait | SendMessage | RunFarmware |
		//TakePhoto
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TurnOn
		public RuleCall getTurnOnParserRuleCall_0() { return cTurnOnParserRuleCall_0; }
		
		//TurnOff
		public RuleCall getTurnOffParserRuleCall_1() { return cTurnOffParserRuleCall_1; }
		
		//MoveRelative
		public RuleCall getMoveRelativeParserRuleCall_2() { return cMoveRelativeParserRuleCall_2; }
		
		//FindHome
		public RuleCall getFindHomeParserRuleCall_3() { return cFindHomeParserRuleCall_3; }
		
		//MoveAbsolute
		public RuleCall getMoveAbsoluteParserRuleCall_4() { return cMoveAbsoluteParserRuleCall_4; }
		
		//ExecuteSequence
		public RuleCall getExecuteSequenceParserRuleCall_5() { return cExecuteSequenceParserRuleCall_5; }
		
		//Wait
		public RuleCall getWaitParserRuleCall_6() { return cWaitParserRuleCall_6; }
		
		//SendMessage
		public RuleCall getSendMessageParserRuleCall_7() { return cSendMessageParserRuleCall_7; }
		
		//RunFarmware
		public RuleCall getRunFarmwareParserRuleCall_8() { return cRunFarmwareParserRuleCall_8; }
		
		//TakePhoto
		public RuleCall getTakePhotoParserRuleCall_9() { return cTakePhotoParserRuleCall_9; }
	}
	public class SequenceInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.SequenceInstruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSequenceCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SequenceInstruction:
		//	If | SequenceCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//If | SequenceCommand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//If
		public RuleCall getIfParserRuleCall_0() { return cIfParserRuleCall_0; }
		
		//SequenceCommand
		public RuleCall getSequenceCommandParserRuleCall_1() { return cSequenceCommandParserRuleCall_1; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsEqualToParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIsNotEqualToParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIsGreaterThanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIsLowerThanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BooleanExpression:
		//	IsEqualTo | IsNotEqualTo | IsGreaterThan | IsLowerThan;
		@Override public ParserRule getRule() { return rule; }
		
		//IsEqualTo | IsNotEqualTo | IsGreaterThan | IsLowerThan
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IsEqualTo
		public RuleCall getIsEqualToParserRuleCall_0() { return cIsEqualToParserRuleCall_0; }
		
		//IsNotEqualTo
		public RuleCall getIsNotEqualToParserRuleCall_1() { return cIsNotEqualToParserRuleCall_1; }
		
		//IsGreaterThan
		public RuleCall getIsGreaterThanParserRuleCall_2() { return cIsGreaterThanParserRuleCall_2; }
		
		//IsLowerThan
		public RuleCall getIsLowerThanParserRuleCall_3() { return cIsLowerThanParserRuleCall_3; }
	}
	public class TurnOnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.TurnOn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTurnOnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTurnOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPinINTTerminalRuleCall_4_0 = (RuleCall)cPinAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cModeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cModeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cModeSTRINGTerminalRuleCall_8_0 = (RuleCall)cModeAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//TurnOn:
		//	{TurnOn}
		//	'turnOn(' 'pin' '=' pin=INT ',' 'mode' '=' mode=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{TurnOn} 'turnOn(' 'pin' '=' pin=INT ',' 'mode' '=' mode=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//{TurnOn}
		public Action getTurnOnAction_0() { return cTurnOnAction_0; }
		
		//'turnOn('
		public Keyword getTurnOnKeyword_1() { return cTurnOnKeyword_1; }
		
		//'pin'
		public Keyword getPinKeyword_2() { return cPinKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//pin=INT
		public Assignment getPinAssignment_4() { return cPinAssignment_4; }
		
		//INT
		public RuleCall getPinINTTerminalRuleCall_4_0() { return cPinINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'mode'
		public Keyword getModeKeyword_6() { return cModeKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//mode=STRING
		public Assignment getModeAssignment_8() { return cModeAssignment_8; }
		
		//STRING
		public RuleCall getModeSTRINGTerminalRuleCall_8_0() { return cModeSTRINGTerminalRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class TurnOffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.TurnOff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTurnOffAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTurnOffKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPinINTTerminalRuleCall_4_0 = (RuleCall)cPinAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cModeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cModeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cModeSTRINGTerminalRuleCall_8_0 = (RuleCall)cModeAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//TurnOff:
		//	{TurnOff}
		//	'turnOff(' 'pin' '=' pin=INT ',' 'mode' '=' mode=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{TurnOff} 'turnOff(' 'pin' '=' pin=INT ',' 'mode' '=' mode=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//{TurnOff}
		public Action getTurnOffAction_0() { return cTurnOffAction_0; }
		
		//'turnOff('
		public Keyword getTurnOffKeyword_1() { return cTurnOffKeyword_1; }
		
		//'pin'
		public Keyword getPinKeyword_2() { return cPinKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//pin=INT
		public Assignment getPinAssignment_4() { return cPinAssignment_4; }
		
		//INT
		public RuleCall getPinINTTerminalRuleCall_4_0() { return cPinINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'mode'
		public Keyword getModeKeyword_6() { return cModeKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//mode=STRING
		public Assignment getModeAssignment_8() { return cModeAssignment_8; }
		
		//STRING
		public RuleCall getModeSTRINGTerminalRuleCall_8_0() { return cModeSTRINGTerminalRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class MoveRelativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.MoveRelative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoveRelativeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMoveRelativeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXINTTerminalRuleCall_4_0 = (RuleCall)cXAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cYKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cYAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cYINTTerminalRuleCall_8_0 = (RuleCall)cYAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cZKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cZAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cZINTTerminalRuleCall_12_0 = (RuleCall)cZAssignment_12.eContents().get(0);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cSpeedKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cEqualsSignKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cSpeedAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cSpeedINTTerminalRuleCall_16_0 = (RuleCall)cSpeedAssignment_16.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//MoveRelative:
		//	{MoveRelative}
		//	'moveRelative(' 'x' '=' x=INT ',' 'y' '=' y=INT ',' 'z' '=' z=INT ',' 'speed' '=' speed=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{MoveRelative} 'moveRelative(' 'x' '=' x=INT ',' 'y' '=' y=INT ',' 'z' '=' z=INT ',' 'speed' '=' speed=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{MoveRelative}
		public Action getMoveRelativeAction_0() { return cMoveRelativeAction_0; }
		
		//'moveRelative('
		public Keyword getMoveRelativeKeyword_1() { return cMoveRelativeKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//x=INT
		public Assignment getXAssignment_4() { return cXAssignment_4; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_4_0() { return cXINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'y'
		public Keyword getYKeyword_6() { return cYKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//y=INT
		public Assignment getYAssignment_8() { return cYAssignment_8; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_8_0() { return cYINTTerminalRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//'z'
		public Keyword getZKeyword_10() { return cZKeyword_10; }
		
		//'='
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }
		
		//z=INT
		public Assignment getZAssignment_12() { return cZAssignment_12; }
		
		//INT
		public RuleCall getZINTTerminalRuleCall_12_0() { return cZINTTerminalRuleCall_12_0; }
		
		//','
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//'speed'
		public Keyword getSpeedKeyword_14() { return cSpeedKeyword_14; }
		
		//'='
		public Keyword getEqualsSignKeyword_15() { return cEqualsSignKeyword_15; }
		
		//speed=INT
		public Assignment getSpeedAssignment_16() { return cSpeedAssignment_16; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_16_0() { return cSpeedINTTerminalRuleCall_16_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_17() { return cRightParenthesisKeyword_17; }
	}
	public class FindHomeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.FindHome");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFindHomeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFindHomeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFindXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFindXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFindXEBooleanParserRuleCall_4_0 = (RuleCall)cFindXAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cFindYKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFindYAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFindYEBooleanParserRuleCall_8_0 = (RuleCall)cFindYAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cFindZKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cFindZAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cFindZEBooleanParserRuleCall_12_0 = (RuleCall)cFindZAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//FindHome:
		//	{FindHome}
		//	'findHome(' 'findX' '=' findX=EBoolean ',' 'findY' '=' findY=EBoolean ',' 'findZ' '=' findZ=EBoolean ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{FindHome} 'findHome(' 'findX' '=' findX=EBoolean ',' 'findY' '=' findY=EBoolean ',' 'findZ' '=' findZ=EBoolean ')'
		public Group getGroup() { return cGroup; }
		
		//{FindHome}
		public Action getFindHomeAction_0() { return cFindHomeAction_0; }
		
		//'findHome('
		public Keyword getFindHomeKeyword_1() { return cFindHomeKeyword_1; }
		
		//'findX'
		public Keyword getFindXKeyword_2() { return cFindXKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//findX=EBoolean
		public Assignment getFindXAssignment_4() { return cFindXAssignment_4; }
		
		//EBoolean
		public RuleCall getFindXEBooleanParserRuleCall_4_0() { return cFindXEBooleanParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'findY'
		public Keyword getFindYKeyword_6() { return cFindYKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//findY=EBoolean
		public Assignment getFindYAssignment_8() { return cFindYAssignment_8; }
		
		//EBoolean
		public RuleCall getFindYEBooleanParserRuleCall_8_0() { return cFindYEBooleanParserRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//'findZ'
		public Keyword getFindZKeyword_10() { return cFindZKeyword_10; }
		
		//'='
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }
		
		//findZ=EBoolean
		public Assignment getFindZAssignment_12() { return cFindZAssignment_12; }
		
		//EBoolean
		public RuleCall getFindZEBooleanParserRuleCall_12_0() { return cFindZEBooleanParserRuleCall_12_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
	}
	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSequenceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cSequenceInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSequenceInstructionsSequenceInstructionParserRuleCall_3_0 = (RuleCall)cSequenceInstructionsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sequence:
		//	{Sequence}
		//	'sequence' name=STRING
		//	sequenceInstructions+=SequenceInstruction*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{Sequence} 'sequence' name=STRING sequenceInstructions+=SequenceInstruction* 'end'
		public Group getGroup() { return cGroup; }
		
		//{Sequence}
		public Action getSequenceAction_0() { return cSequenceAction_0; }
		
		//'sequence'
		public Keyword getSequenceKeyword_1() { return cSequenceKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//sequenceInstructions+=SequenceInstruction*
		public Assignment getSequenceInstructionsAssignment_3() { return cSequenceInstructionsAssignment_3; }
		
		//SequenceInstruction
		public RuleCall getSequenceInstructionsSequenceInstructionParserRuleCall_3_0() { return cSequenceInstructionsSequenceInstructionParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBooleanExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBooleanExpressionBooleanExpressionParserRuleCall_2_0 = (RuleCall)cBooleanExpressionAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenExecuteSequenceParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseExecuteSequenceParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//If:
		//	{If}
		//	'if' booleanExpression=BooleanExpression
		//	'then' then=ExecuteSequence? ('else' else=ExecuteSequence)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{If} 'if' booleanExpression=BooleanExpression 'then' then=ExecuteSequence? ('else' else=ExecuteSequence)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{If}
		public Action getIfAction_0() { return cIfAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//booleanExpression=BooleanExpression
		public Assignment getBooleanExpressionAssignment_2() { return cBooleanExpressionAssignment_2; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionBooleanExpressionParserRuleCall_2_0() { return cBooleanExpressionBooleanExpressionParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//then=ExecuteSequence?
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//ExecuteSequence
		public RuleCall getThenExecuteSequenceParserRuleCall_4_0() { return cThenExecuteSequenceParserRuleCall_4_0; }
		
		//('else' else=ExecuteSequence)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else=ExecuteSequence
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//ExecuteSequence
		public RuleCall getElseExecuteSequenceParserRuleCall_5_1_0() { return cElseExecuteSequenceParserRuleCall_5_1_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class MoveAbsoluteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.MoveAbsolute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoveAbsoluteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMoveAbsoluteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXINTTerminalRuleCall_4_0 = (RuleCall)cXAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cYKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cYAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cYINTTerminalRuleCall_8_0 = (RuleCall)cYAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cZKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cZAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cZINTTerminalRuleCall_12_0 = (RuleCall)cZAssignment_12.eContents().get(0);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cSpeedKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cEqualsSignKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cSpeedAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cSpeedINTTerminalRuleCall_16_0 = (RuleCall)cSpeedAssignment_16.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//MoveAbsolute:
		//	{MoveAbsolute}
		//	'moveAbsolute(' 'x' '=' x=INT ',' 'y' '=' y=INT ',' 'z' '=' z=INT ',' 'speed' '=' speed=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{MoveAbsolute} 'moveAbsolute(' 'x' '=' x=INT ',' 'y' '=' y=INT ',' 'z' '=' z=INT ',' 'speed' '=' speed=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{MoveAbsolute}
		public Action getMoveAbsoluteAction_0() { return cMoveAbsoluteAction_0; }
		
		//'moveAbsolute('
		public Keyword getMoveAbsoluteKeyword_1() { return cMoveAbsoluteKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//x=INT
		public Assignment getXAssignment_4() { return cXAssignment_4; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_4_0() { return cXINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'y'
		public Keyword getYKeyword_6() { return cYKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//y=INT
		public Assignment getYAssignment_8() { return cYAssignment_8; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_8_0() { return cYINTTerminalRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//'z'
		public Keyword getZKeyword_10() { return cZKeyword_10; }
		
		//'='
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }
		
		//z=INT
		public Assignment getZAssignment_12() { return cZAssignment_12; }
		
		//INT
		public RuleCall getZINTTerminalRuleCall_12_0() { return cZINTTerminalRuleCall_12_0; }
		
		//','
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//'speed'
		public Keyword getSpeedKeyword_14() { return cSpeedKeyword_14; }
		
		//'='
		public Keyword getEqualsSignKeyword_15() { return cEqualsSignKeyword_15; }
		
		//speed=INT
		public Assignment getSpeedAssignment_16() { return cSpeedAssignment_16; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_16_0() { return cSpeedINTTerminalRuleCall_16_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_17() { return cRightParenthesisKeyword_17; }
	}
	public class ExecuteSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.ExecuteSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExecuteSequenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExecuteSequenceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIdKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdINTTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ExecuteSequence:
		//	{ExecuteSequence}
		//	'executeSequence' '(' 'id' '=' id=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ExecuteSequence} 'executeSequence' '(' 'id' '=' id=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{ExecuteSequence}
		public Action getExecuteSequenceAction_0() { return cExecuteSequenceAction_0; }
		
		//'executeSequence'
		public Keyword getExecuteSequenceKeyword_1() { return cExecuteSequenceKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'id'
		public Keyword getIdKeyword_3() { return cIdKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//id=INT
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_5_0() { return cIdINTTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class WaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.Wait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWaitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWaitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDurationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDurationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDurationEDoubleParserRuleCall_5_0 = (RuleCall)cDurationAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Wait:
		//	{Wait}
		//	'wait' '(' 'duration' '=' duration=EDouble ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Wait} 'wait' '(' 'duration' '=' duration=EDouble ')'
		public Group getGroup() { return cGroup; }
		
		//{Wait}
		public Action getWaitAction_0() { return cWaitAction_0; }
		
		//'wait'
		public Keyword getWaitKeyword_1() { return cWaitKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'duration'
		public Keyword getDurationKeyword_3() { return cDurationKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//duration=EDouble
		public Assignment getDurationAssignment_5() { return cDurationAssignment_5; }
		
		//EDouble
		public RuleCall getDurationEDoubleParserRuleCall_5_0() { return cDurationEDoubleParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class SendMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.SendMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSendMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSendMessageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMessageTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMessageTypeSTRINGTerminalRuleCall_5_0 = (RuleCall)cMessageTypeAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cMessageKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMessageAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMessageSTRINGTerminalRuleCall_9_0 = (RuleCall)cMessageAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//SendMessage:
		//	{SendMessage}
		//	'sendMessage' '(' 'type' '=' messageType=STRING ',' 'message' '=' message=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{SendMessage} 'sendMessage' '(' 'type' '=' messageType=STRING ',' 'message' '=' message=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//{SendMessage}
		public Action getSendMessageAction_0() { return cSendMessageAction_0; }
		
		//'sendMessage'
		public Keyword getSendMessageKeyword_1() { return cSendMessageKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//messageType=STRING
		public Assignment getMessageTypeAssignment_5() { return cMessageTypeAssignment_5; }
		
		//STRING
		public RuleCall getMessageTypeSTRINGTerminalRuleCall_5_0() { return cMessageTypeSTRINGTerminalRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//'message'
		public Keyword getMessageKeyword_7() { return cMessageKeyword_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//message=STRING
		public Assignment getMessageAssignment_9() { return cMessageAssignment_9; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_9_0() { return cMessageSTRINGTerminalRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}
	public class RunFarmwareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.RunFarmware");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRunFarmwareAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRunFarmwareKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RunFarmware:
		//	{RunFarmware}
		//	'runFarmware' '(' 'name' '=' name=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{RunFarmware} 'runFarmware' '(' 'name' '=' name=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//{RunFarmware}
		public Action getRunFarmwareAction_0() { return cRunFarmwareAction_0; }
		
		//'runFarmware'
		public Keyword getRunFarmwareKeyword_1() { return cRunFarmwareKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'name'
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//name=STRING
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_5_0() { return cNameSTRINGTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class TakePhotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.TakePhoto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTakePhotoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTakePhotoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TakePhoto:
		//	{TakePhoto}
		//	'takePhoto()';
		@Override public ParserRule getRule() { return rule; }
		
		//{TakePhoto} 'takePhoto()'
		public Group getGroup() { return cGroup; }
		
		//{TakePhoto}
		public Action getTakePhotoAction_0() { return cTakePhotoAction_0; }
		
		//'takePhoto()'
		public Keyword getTakePhotoKeyword_1() { return cTakePhotoKeyword_1; }
	}
	public class ScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.Schedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScheduleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cScheduleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSequenceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSequenceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSequenceSTRINGTerminalRuleCall_5_0 = (RuleCall)cSequenceAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cStartDateKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStartDateAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStartDateSTRINGTerminalRuleCall_9_0 = (RuleCall)cStartDateAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cStartTimeKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cStartTimeAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cStartTimeSTRINGTerminalRuleCall_13_0 = (RuleCall)cStartTimeAssignment_13.eContents().get(0);
		private final Keyword cCommaKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cRepeatKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cEqualsSignKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cRepeatAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cRepeatEBooleanParserRuleCall_17_0 = (RuleCall)cRepeatAssignment_17.eContents().get(0);
		private final Keyword cCommaKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cRepeatFrequencyKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cEqualsSignKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Assignment cRepeatFrequencyAssignment_21 = (Assignment)cGroup.eContents().get(21);
		private final RuleCall cRepeatFrequencyINTTerminalRuleCall_21_0 = (RuleCall)cRepeatFrequencyAssignment_21.eContents().get(0);
		private final Keyword cCommaKeyword_22 = (Keyword)cGroup.eContents().get(22);
		private final Keyword cRepeatUnitKeyword_23 = (Keyword)cGroup.eContents().get(23);
		private final Keyword cEqualsSignKeyword_24 = (Keyword)cGroup.eContents().get(24);
		private final Assignment cRepeatUnitAssignment_25 = (Assignment)cGroup.eContents().get(25);
		private final RuleCall cRepeatUnitSTRINGTerminalRuleCall_25_0 = (RuleCall)cRepeatUnitAssignment_25.eContents().get(0);
		private final Keyword cCommaKeyword_26 = (Keyword)cGroup.eContents().get(26);
		private final Keyword cEndDateKeyword_27 = (Keyword)cGroup.eContents().get(27);
		private final Keyword cEqualsSignKeyword_28 = (Keyword)cGroup.eContents().get(28);
		private final Assignment cEndDateAssignment_29 = (Assignment)cGroup.eContents().get(29);
		private final RuleCall cEndDateSTRINGTerminalRuleCall_29_0 = (RuleCall)cEndDateAssignment_29.eContents().get(0);
		private final Keyword cCommaKeyword_30 = (Keyword)cGroup.eContents().get(30);
		private final Keyword cEndTimeKeyword_31 = (Keyword)cGroup.eContents().get(31);
		private final Keyword cEqualsSignKeyword_32 = (Keyword)cGroup.eContents().get(32);
		private final Assignment cEndTimeAssignment_33 = (Assignment)cGroup.eContents().get(33);
		private final RuleCall cEndTimeSTRINGTerminalRuleCall_33_0 = (RuleCall)cEndTimeAssignment_33.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_34 = (Keyword)cGroup.eContents().get(34);
		
		//Schedule:
		//	{Schedule}
		//	'schedule' '(' 'sequence' '=' sequence=STRING ',' 'startDate' '=' startDate=STRING ',' 'startTime' '='
		//	startTime=STRING ',' 'repeat' '=' repeat=EBoolean ',' 'repeatFrequency' '=' repeatFrequency=INT ',' 'repeatUnit' '='
		//	repeatUnit=STRING ',' 'endDate' '=' endDate=STRING ',' 'endTime' '=' endTime=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Schedule} 'schedule' '(' 'sequence' '=' sequence=STRING ',' 'startDate' '=' startDate=STRING ',' 'startTime' '='
		//startTime=STRING ',' 'repeat' '=' repeat=EBoolean ',' 'repeatFrequency' '=' repeatFrequency=INT ',' 'repeatUnit' '='
		//repeatUnit=STRING ',' 'endDate' '=' endDate=STRING ',' 'endTime' '=' endTime=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//{Schedule}
		public Action getScheduleAction_0() { return cScheduleAction_0; }
		
		//'schedule'
		public Keyword getScheduleKeyword_1() { return cScheduleKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'sequence'
		public Keyword getSequenceKeyword_3() { return cSequenceKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//sequence=STRING
		public Assignment getSequenceAssignment_5() { return cSequenceAssignment_5; }
		
		//STRING
		public RuleCall getSequenceSTRINGTerminalRuleCall_5_0() { return cSequenceSTRINGTerminalRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//'startDate'
		public Keyword getStartDateKeyword_7() { return cStartDateKeyword_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//startDate=STRING
		public Assignment getStartDateAssignment_9() { return cStartDateAssignment_9; }
		
		//STRING
		public RuleCall getStartDateSTRINGTerminalRuleCall_9_0() { return cStartDateSTRINGTerminalRuleCall_9_0; }
		
		//','
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//'startTime'
		public Keyword getStartTimeKeyword_11() { return cStartTimeKeyword_11; }
		
		//'='
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }
		
		//startTime=STRING
		public Assignment getStartTimeAssignment_13() { return cStartTimeAssignment_13; }
		
		//STRING
		public RuleCall getStartTimeSTRINGTerminalRuleCall_13_0() { return cStartTimeSTRINGTerminalRuleCall_13_0; }
		
		//','
		public Keyword getCommaKeyword_14() { return cCommaKeyword_14; }
		
		//'repeat'
		public Keyword getRepeatKeyword_15() { return cRepeatKeyword_15; }
		
		//'='
		public Keyword getEqualsSignKeyword_16() { return cEqualsSignKeyword_16; }
		
		//repeat=EBoolean
		public Assignment getRepeatAssignment_17() { return cRepeatAssignment_17; }
		
		//EBoolean
		public RuleCall getRepeatEBooleanParserRuleCall_17_0() { return cRepeatEBooleanParserRuleCall_17_0; }
		
		//','
		public Keyword getCommaKeyword_18() { return cCommaKeyword_18; }
		
		//'repeatFrequency'
		public Keyword getRepeatFrequencyKeyword_19() { return cRepeatFrequencyKeyword_19; }
		
		//'='
		public Keyword getEqualsSignKeyword_20() { return cEqualsSignKeyword_20; }
		
		//repeatFrequency=INT
		public Assignment getRepeatFrequencyAssignment_21() { return cRepeatFrequencyAssignment_21; }
		
		//INT
		public RuleCall getRepeatFrequencyINTTerminalRuleCall_21_0() { return cRepeatFrequencyINTTerminalRuleCall_21_0; }
		
		//','
		public Keyword getCommaKeyword_22() { return cCommaKeyword_22; }
		
		//'repeatUnit'
		public Keyword getRepeatUnitKeyword_23() { return cRepeatUnitKeyword_23; }
		
		//'='
		public Keyword getEqualsSignKeyword_24() { return cEqualsSignKeyword_24; }
		
		//repeatUnit=STRING
		public Assignment getRepeatUnitAssignment_25() { return cRepeatUnitAssignment_25; }
		
		//STRING
		public RuleCall getRepeatUnitSTRINGTerminalRuleCall_25_0() { return cRepeatUnitSTRINGTerminalRuleCall_25_0; }
		
		//','
		public Keyword getCommaKeyword_26() { return cCommaKeyword_26; }
		
		//'endDate'
		public Keyword getEndDateKeyword_27() { return cEndDateKeyword_27; }
		
		//'='
		public Keyword getEqualsSignKeyword_28() { return cEqualsSignKeyword_28; }
		
		//endDate=STRING
		public Assignment getEndDateAssignment_29() { return cEndDateAssignment_29; }
		
		//STRING
		public RuleCall getEndDateSTRINGTerminalRuleCall_29_0() { return cEndDateSTRINGTerminalRuleCall_29_0; }
		
		//','
		public Keyword getCommaKeyword_30() { return cCommaKeyword_30; }
		
		//'endTime'
		public Keyword getEndTimeKeyword_31() { return cEndTimeKeyword_31; }
		
		//'='
		public Keyword getEqualsSignKeyword_32() { return cEqualsSignKeyword_32; }
		
		//endTime=STRING
		public Assignment getEndTimeAssignment_33() { return cEndTimeAssignment_33; }
		
		//STRING
		public RuleCall getEndTimeSTRINGTerminalRuleCall_33_0() { return cEndTimeSTRINGTerminalRuleCall_33_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_34() { return cRightParenthesisKeyword_34; }
	}
	public class ListPeripheralsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.ListPeripherals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListPeripheralsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cListPeripheralsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ListPeripherals:
		//	{ListPeripherals}
		//	'listPeripherals()';
		@Override public ParserRule getRule() { return rule; }
		
		//{ListPeripherals} 'listPeripherals()'
		public Group getGroup() { return cGroup; }
		
		//{ListPeripherals}
		public Action getListPeripheralsAction_0() { return cListPeripheralsAction_0; }
		
		//'listPeripherals()'
		public Keyword getListPeripheralsKeyword_1() { return cListPeripheralsKeyword_1; }
	}
	public class ListSequencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.ListSequences");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListSequencesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cListSequencesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ListSequences:
		//	{ListSequences}
		//	'listSequences()';
		@Override public ParserRule getRule() { return rule; }
		
		//{ListSequences} 'listSequences()'
		public Group getGroup() { return cGroup; }
		
		//{ListSequences}
		public Action getListSequencesAction_0() { return cListSequencesAction_0; }
		
		//'listSequences()'
		public Keyword getListSequencesKeyword_1() { return cListSequencesKeyword_1; }
	}
	public class IsEqualToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.IsEqualTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsEqualToAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAxeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cAxeSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cAxeAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cPinKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPinNumberAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPinNumberINTTerminalRuleCall_1_1_1_0 = (RuleCall)cPinNumberAssignment_1_1_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueINTTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//IsEqualTo:
		//	{IsEqualTo} (axe=STRING | 'pin' pinNumber=INT) 'is' 'equal' 'to' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{IsEqualTo} (axe=STRING | 'pin' pinNumber=INT) 'is' 'equal' 'to' value=INT
		public Group getGroup() { return cGroup; }
		
		//{IsEqualTo}
		public Action getIsEqualToAction_0() { return cIsEqualToAction_0; }
		
		//axe=STRING | 'pin' pinNumber=INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//axe=STRING
		public Assignment getAxeAssignment_1_0() { return cAxeAssignment_1_0; }
		
		//STRING
		public RuleCall getAxeSTRINGTerminalRuleCall_1_0_0() { return cAxeSTRINGTerminalRuleCall_1_0_0; }
		
		//'pin' pinNumber=INT
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'pin'
		public Keyword getPinKeyword_1_1_0() { return cPinKeyword_1_1_0; }
		
		//pinNumber=INT
		public Assignment getPinNumberAssignment_1_1_1() { return cPinNumberAssignment_1_1_1; }
		
		//INT
		public RuleCall getPinNumberINTTerminalRuleCall_1_1_1_0() { return cPinNumberINTTerminalRuleCall_1_1_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//'equal'
		public Keyword getEqualKeyword_3() { return cEqualKeyword_3; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//value=INT
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_5_0() { return cValueINTTerminalRuleCall_5_0; }
	}
	public class IsNotEqualToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.IsNotEqualTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsNotEqualToAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAxeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cAxeSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cAxeAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cPinKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPinNumberAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPinNumberINTTerminalRuleCall_1_1_1_0 = (RuleCall)cPinNumberAssignment_1_1_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNotKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueINTTerminalRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		
		//IsNotEqualTo:
		//	{IsNotEqualTo} (axe=STRING | 'pin' pinNumber=INT) 'is' 'not' 'equal' 'to' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{IsNotEqualTo} (axe=STRING | 'pin' pinNumber=INT) 'is' 'not' 'equal' 'to' value=INT
		public Group getGroup() { return cGroup; }
		
		//{IsNotEqualTo}
		public Action getIsNotEqualToAction_0() { return cIsNotEqualToAction_0; }
		
		//axe=STRING | 'pin' pinNumber=INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//axe=STRING
		public Assignment getAxeAssignment_1_0() { return cAxeAssignment_1_0; }
		
		//STRING
		public RuleCall getAxeSTRINGTerminalRuleCall_1_0_0() { return cAxeSTRINGTerminalRuleCall_1_0_0; }
		
		//'pin' pinNumber=INT
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'pin'
		public Keyword getPinKeyword_1_1_0() { return cPinKeyword_1_1_0; }
		
		//pinNumber=INT
		public Assignment getPinNumberAssignment_1_1_1() { return cPinNumberAssignment_1_1_1; }
		
		//INT
		public RuleCall getPinNumberINTTerminalRuleCall_1_1_1_0() { return cPinNumberINTTerminalRuleCall_1_1_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//'not'
		public Keyword getNotKeyword_3() { return cNotKeyword_3; }
		
		//'equal'
		public Keyword getEqualKeyword_4() { return cEqualKeyword_4; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//value=INT
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_6_0() { return cValueINTTerminalRuleCall_6_0; }
	}
	public class IsGreaterThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.IsGreaterThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsGreaterThanAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAxeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cAxeSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cAxeAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cPinKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPinNumberAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPinNumberINTTerminalRuleCall_1_1_1_0 = (RuleCall)cPinNumberAssignment_1_1_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cGreaterKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cThanKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueINTTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//IsGreaterThan:
		//	{IsGreaterThan} (axe=STRING | 'pin' pinNumber=INT) 'is' 'greater' 'than' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{IsGreaterThan} (axe=STRING | 'pin' pinNumber=INT) 'is' 'greater' 'than' value=INT
		public Group getGroup() { return cGroup; }
		
		//{IsGreaterThan}
		public Action getIsGreaterThanAction_0() { return cIsGreaterThanAction_0; }
		
		//axe=STRING | 'pin' pinNumber=INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//axe=STRING
		public Assignment getAxeAssignment_1_0() { return cAxeAssignment_1_0; }
		
		//STRING
		public RuleCall getAxeSTRINGTerminalRuleCall_1_0_0() { return cAxeSTRINGTerminalRuleCall_1_0_0; }
		
		//'pin' pinNumber=INT
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'pin'
		public Keyword getPinKeyword_1_1_0() { return cPinKeyword_1_1_0; }
		
		//pinNumber=INT
		public Assignment getPinNumberAssignment_1_1_1() { return cPinNumberAssignment_1_1_1; }
		
		//INT
		public RuleCall getPinNumberINTTerminalRuleCall_1_1_1_0() { return cPinNumberINTTerminalRuleCall_1_1_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//'greater'
		public Keyword getGreaterKeyword_3() { return cGreaterKeyword_3; }
		
		//'than'
		public Keyword getThanKeyword_4() { return cThanKeyword_4; }
		
		//value=INT
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_5_0() { return cValueINTTerminalRuleCall_5_0; }
	}
	public class IsLowerThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.IsLowerThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsLowerThanAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAxeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cAxeSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cAxeAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cPinKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPinNumberAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPinNumberINTTerminalRuleCall_1_1_1_0 = (RuleCall)cPinNumberAssignment_1_1_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLowerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cThanKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueINTTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//IsLowerThan:
		//	{IsLowerThan} (axe=STRING | 'pin' pinNumber=INT) 'is' 'lower' 'than' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{IsLowerThan} (axe=STRING | 'pin' pinNumber=INT) 'is' 'lower' 'than' value=INT
		public Group getGroup() { return cGroup; }
		
		//{IsLowerThan}
		public Action getIsLowerThanAction_0() { return cIsLowerThanAction_0; }
		
		//axe=STRING | 'pin' pinNumber=INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//axe=STRING
		public Assignment getAxeAssignment_1_0() { return cAxeAssignment_1_0; }
		
		//STRING
		public RuleCall getAxeSTRINGTerminalRuleCall_1_0_0() { return cAxeSTRINGTerminalRuleCall_1_0_0; }
		
		//'pin' pinNumber=INT
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'pin'
		public Keyword getPinKeyword_1_1_0() { return cPinKeyword_1_1_0; }
		
		//pinNumber=INT
		public Assignment getPinNumberAssignment_1_1_1() { return cPinNumberAssignment_1_1_1; }
		
		//INT
		public RuleCall getPinNumberINTTerminalRuleCall_1_1_1_0() { return cPinNumberINTTerminalRuleCall_1_1_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//'lower'
		public Keyword getLowerKeyword_3() { return cLowerKeyword_3; }
		
		//'than'
		public Keyword getThanKeyword_4() { return cThanKeyword_4; }
		
		//value=INT
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_5_0() { return cValueINTTerminalRuleCall_5_0; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble ecore::EDouble:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'E' | 'e'
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.farmbot.MyFarmbot.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final FarmbotElements pFarmbot;
	private final InstructionElements pInstruction;
	private final CommandElements pCommand;
	private final SequenceCommandElements pSequenceCommand;
	private final SequenceInstructionElements pSequenceInstruction;
	private final BooleanExpressionElements pBooleanExpression;
	private final TurnOnElements pTurnOn;
	private final TurnOffElements pTurnOff;
	private final MoveRelativeElements pMoveRelative;
	private final FindHomeElements pFindHome;
	private final SequenceElements pSequence;
	private final IfElements pIf;
	private final MoveAbsoluteElements pMoveAbsolute;
	private final ExecuteSequenceElements pExecuteSequence;
	private final WaitElements pWait;
	private final SendMessageElements pSendMessage;
	private final RunFarmwareElements pRunFarmware;
	private final TakePhotoElements pTakePhoto;
	private final ScheduleElements pSchedule;
	private final ListPeripheralsElements pListPeripherals;
	private final ListSequencesElements pListSequences;
	private final IsEqualToElements pIsEqualTo;
	private final IsNotEqualToElements pIsNotEqualTo;
	private final IsGreaterThanElements pIsGreaterThan;
	private final IsLowerThanElements pIsLowerThan;
	private final EDoubleElements pEDouble;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyFarmbotGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFarmbot = new FarmbotElements();
		this.pInstruction = new InstructionElements();
		this.pCommand = new CommandElements();
		this.pSequenceCommand = new SequenceCommandElements();
		this.pSequenceInstruction = new SequenceInstructionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pTurnOn = new TurnOnElements();
		this.pTurnOff = new TurnOffElements();
		this.pMoveRelative = new MoveRelativeElements();
		this.pFindHome = new FindHomeElements();
		this.pSequence = new SequenceElements();
		this.pIf = new IfElements();
		this.pMoveAbsolute = new MoveAbsoluteElements();
		this.pExecuteSequence = new ExecuteSequenceElements();
		this.pWait = new WaitElements();
		this.pSendMessage = new SendMessageElements();
		this.pRunFarmware = new RunFarmwareElements();
		this.pTakePhoto = new TakePhotoElements();
		this.pSchedule = new ScheduleElements();
		this.pListPeripherals = new ListPeripheralsElements();
		this.pListSequences = new ListSequencesElements();
		this.pIsEqualTo = new IsEqualToElements();
		this.pIsNotEqualTo = new IsNotEqualToElements();
		this.pIsGreaterThan = new IsGreaterThanElements();
		this.pIsLowerThan = new IsLowerThanElements();
		this.pEDouble = new EDoubleElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.farmbot.MyFarmbot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Farmbot:
	//	{Farmbot} instructions+=Instruction+;
	public FarmbotElements getFarmbotAccess() {
		return pFarmbot;
	}
	
	public ParserRule getFarmbotRule() {
		return getFarmbotAccess().getRule();
	}
	
	//Instruction:
	//	SequenceInstruction | Sequence | Command;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Command:
	//	Schedule | ListPeripherals | ListSequences;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//SequenceCommand:
	//	TurnOn | TurnOff | MoveRelative | FindHome | MoveAbsolute | ExecuteSequence | Wait | SendMessage | RunFarmware |
	//	TakePhoto;
	public SequenceCommandElements getSequenceCommandAccess() {
		return pSequenceCommand;
	}
	
	public ParserRule getSequenceCommandRule() {
		return getSequenceCommandAccess().getRule();
	}
	
	//SequenceInstruction:
	//	If | SequenceCommand;
	public SequenceInstructionElements getSequenceInstructionAccess() {
		return pSequenceInstruction;
	}
	
	public ParserRule getSequenceInstructionRule() {
		return getSequenceInstructionAccess().getRule();
	}
	
	//BooleanExpression:
	//	IsEqualTo | IsNotEqualTo | IsGreaterThan | IsLowerThan;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//TurnOn:
	//	{TurnOn}
	//	'turnOn(' 'pin' '=' pin=INT ',' 'mode' '=' mode=STRING ')';
	public TurnOnElements getTurnOnAccess() {
		return pTurnOn;
	}
	
	public ParserRule getTurnOnRule() {
		return getTurnOnAccess().getRule();
	}
	
	//TurnOff:
	//	{TurnOff}
	//	'turnOff(' 'pin' '=' pin=INT ',' 'mode' '=' mode=STRING ')';
	public TurnOffElements getTurnOffAccess() {
		return pTurnOff;
	}
	
	public ParserRule getTurnOffRule() {
		return getTurnOffAccess().getRule();
	}
	
	//MoveRelative:
	//	{MoveRelative}
	//	'moveRelative(' 'x' '=' x=INT ',' 'y' '=' y=INT ',' 'z' '=' z=INT ',' 'speed' '=' speed=INT ')';
	public MoveRelativeElements getMoveRelativeAccess() {
		return pMoveRelative;
	}
	
	public ParserRule getMoveRelativeRule() {
		return getMoveRelativeAccess().getRule();
	}
	
	//FindHome:
	//	{FindHome}
	//	'findHome(' 'findX' '=' findX=EBoolean ',' 'findY' '=' findY=EBoolean ',' 'findZ' '=' findZ=EBoolean ')';
	public FindHomeElements getFindHomeAccess() {
		return pFindHome;
	}
	
	public ParserRule getFindHomeRule() {
		return getFindHomeAccess().getRule();
	}
	
	//Sequence:
	//	{Sequence}
	//	'sequence' name=STRING
	//	sequenceInstructions+=SequenceInstruction*
	//	'end';
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}
	
	//If:
	//	{If}
	//	'if' booleanExpression=BooleanExpression
	//	'then' then=ExecuteSequence? ('else' else=ExecuteSequence)?
	//	'end';
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//MoveAbsolute:
	//	{MoveAbsolute}
	//	'moveAbsolute(' 'x' '=' x=INT ',' 'y' '=' y=INT ',' 'z' '=' z=INT ',' 'speed' '=' speed=INT ')';
	public MoveAbsoluteElements getMoveAbsoluteAccess() {
		return pMoveAbsolute;
	}
	
	public ParserRule getMoveAbsoluteRule() {
		return getMoveAbsoluteAccess().getRule();
	}
	
	//ExecuteSequence:
	//	{ExecuteSequence}
	//	'executeSequence' '(' 'id' '=' id=INT ')';
	public ExecuteSequenceElements getExecuteSequenceAccess() {
		return pExecuteSequence;
	}
	
	public ParserRule getExecuteSequenceRule() {
		return getExecuteSequenceAccess().getRule();
	}
	
	//Wait:
	//	{Wait}
	//	'wait' '(' 'duration' '=' duration=EDouble ')';
	public WaitElements getWaitAccess() {
		return pWait;
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}
	
	//SendMessage:
	//	{SendMessage}
	//	'sendMessage' '(' 'type' '=' messageType=STRING ',' 'message' '=' message=STRING ')';
	public SendMessageElements getSendMessageAccess() {
		return pSendMessage;
	}
	
	public ParserRule getSendMessageRule() {
		return getSendMessageAccess().getRule();
	}
	
	//RunFarmware:
	//	{RunFarmware}
	//	'runFarmware' '(' 'name' '=' name=STRING ')';
	public RunFarmwareElements getRunFarmwareAccess() {
		return pRunFarmware;
	}
	
	public ParserRule getRunFarmwareRule() {
		return getRunFarmwareAccess().getRule();
	}
	
	//TakePhoto:
	//	{TakePhoto}
	//	'takePhoto()';
	public TakePhotoElements getTakePhotoAccess() {
		return pTakePhoto;
	}
	
	public ParserRule getTakePhotoRule() {
		return getTakePhotoAccess().getRule();
	}
	
	//Schedule:
	//	{Schedule}
	//	'schedule' '(' 'sequence' '=' sequence=STRING ',' 'startDate' '=' startDate=STRING ',' 'startTime' '='
	//	startTime=STRING ',' 'repeat' '=' repeat=EBoolean ',' 'repeatFrequency' '=' repeatFrequency=INT ',' 'repeatUnit' '='
	//	repeatUnit=STRING ',' 'endDate' '=' endDate=STRING ',' 'endTime' '=' endTime=STRING ')';
	public ScheduleElements getScheduleAccess() {
		return pSchedule;
	}
	
	public ParserRule getScheduleRule() {
		return getScheduleAccess().getRule();
	}
	
	//ListPeripherals:
	//	{ListPeripherals}
	//	'listPeripherals()';
	public ListPeripheralsElements getListPeripheralsAccess() {
		return pListPeripherals;
	}
	
	public ParserRule getListPeripheralsRule() {
		return getListPeripheralsAccess().getRule();
	}
	
	//ListSequences:
	//	{ListSequences}
	//	'listSequences()';
	public ListSequencesElements getListSequencesAccess() {
		return pListSequences;
	}
	
	public ParserRule getListSequencesRule() {
		return getListSequencesAccess().getRule();
	}
	
	//IsEqualTo:
	//	{IsEqualTo} (axe=STRING | 'pin' pinNumber=INT) 'is' 'equal' 'to' value=INT;
	public IsEqualToElements getIsEqualToAccess() {
		return pIsEqualTo;
	}
	
	public ParserRule getIsEqualToRule() {
		return getIsEqualToAccess().getRule();
	}
	
	//IsNotEqualTo:
	//	{IsNotEqualTo} (axe=STRING | 'pin' pinNumber=INT) 'is' 'not' 'equal' 'to' value=INT;
	public IsNotEqualToElements getIsNotEqualToAccess() {
		return pIsNotEqualTo;
	}
	
	public ParserRule getIsNotEqualToRule() {
		return getIsNotEqualToAccess().getRule();
	}
	
	//IsGreaterThan:
	//	{IsGreaterThan} (axe=STRING | 'pin' pinNumber=INT) 'is' 'greater' 'than' value=INT;
	public IsGreaterThanElements getIsGreaterThanAccess() {
		return pIsGreaterThan;
	}
	
	public ParserRule getIsGreaterThanRule() {
		return getIsGreaterThanAccess().getRule();
	}
	
	//IsLowerThan:
	//	{IsLowerThan} (axe=STRING | 'pin' pinNumber=INT) 'is' 'lower' 'than' value=INT;
	public IsLowerThanElements getIsLowerThanAccess() {
		return pIsLowerThan;
	}
	
	public ParserRule getIsLowerThanRule() {
		return getIsLowerThanAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
