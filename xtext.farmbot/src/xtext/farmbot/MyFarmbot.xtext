// automatically generated by Xtext
grammar xtext.farmbot.MyFarmbot with org.eclipse.xtext.common.Terminals

import "platform:/resource/farmbot-modeling/model/farmbot_modeling.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Farmbot returns Farmbot:
	{Farmbot}
	(instructions+=Instruction)+;

Instruction returns Instruction:
	SequenceInstruction | Sequence | Command;

Command returns Command:
	Schedule | ListSequences;

SequenceCommand returns SequenceCommand:
	TurnOn | TurnOff | MoveRelative | FindHome | MoveAbsolute | ExecuteSequence | Wait | SendMessage | RunFarmware | TakePhoto;

SequenceInstruction returns SequenceInstruction:
	If | SequenceCommand;

BooleanExpression returns BooleanExpression:
	IsEqualTo | IsNotEqualTo | IsGreaterThan | IsLowerThan;


TurnOn returns TurnOn:
	{TurnOn}
	'turnOn(' 'pin' '=' pin=INT ',' 'mode' '=' mode=STRING ')';

TurnOff returns TurnOff:
	{TurnOff}
	'turnOff(' 'pin' '=' pin=INT ',' 'mode' '=' mode=STRING ')';

MoveRelative returns MoveRelative:
	{MoveRelative}
	'moveRelative(' 'x' '=' x=INT ',' 'y' '=' y=INT ',' 'z' '=' z=INT ',' 'speed' '=' speed=INT ')';

FindHome returns FindHome:
	{FindHome}
	'findHome(' 'findX' '=' findX=EBoolean ',' 'findY' '=' findY=EBoolean ',' 'findZ' '=' findZ=EBoolean ')';

Sequence returns Sequence:
	{Sequence}
	'sequence' name=STRING
		(sequenceInstructions+=SequenceInstruction)*
	'end';

If returns If:
	{If}
	'if' booleanExpression=BooleanExpression
	'then' (then=ExecuteSequence)?
	('else' else=ExecuteSequence)?
	'end';

MoveAbsolute returns MoveAbsolute:
	{MoveAbsolute}
	'moveAbsolute(' 'x' '=' x=INT ',' 'y' '=' y=INT ',' 'z' '=' z=INT ',' 'speed' '=' speed=INT')';

ExecuteSequence returns ExecuteSequence:
	{ExecuteSequence}
	'executeSequence' '(' 'id' '=' id=INT ')';

Wait returns Wait:
	{Wait}
	'wait' '(' 'duration' '=' duration=EDouble ')';

SendMessage returns SendMessage:
	{SendMessage}
	'sendMessage' '(' 'type' '=' messageType=STRING ',' 'message' '=' message=STRING ')';

RunFarmware returns RunFarmware:
	{RunFarmware}
	'runFarmware' '(' 'name' '=' name=STRING ')';

TakePhoto returns TakePhoto:
	{TakePhoto}
	'takePhoto()';

Schedule returns Schedule:
	{Schedule}
	'schedule' '(' 'sequence' '=' sequence=STRING ',' 'startDate' '=' startDate=STRING ',' 'startTime' '=' startTime=STRING ',' 'repeat' '=' repeat=EBoolean ','  'repeatFrequency' '=' repeatFrequency=INT ',' 'repeatUnit' '=' repeatUnit=STRING ',' 'endDate' '=' endDate=STRING ',' 'endTime' '=' endTime=STRING ')';

ListSequences returns ListSequences:
	{ListSequences}
	'listSequences()';

IsEqualTo returns IsEqualTo:
	{IsEqualTo}
	(axe=STRING | 'pin'pinNumber=INT) 'is' 'equal' 'to' value=INT;

IsNotEqualTo returns IsNotEqualTo:
	{IsNotEqualTo}
	(axe=STRING | 'pin'pinNumber=INT) 'is' 'not' 'equal' 'to' value=INT;

IsGreaterThan returns IsGreaterThan:
	{IsGreaterThan}
	(axe=STRING | 'pin'pinNumber=INT) 'is' 'greater' 'than' value=INT;

IsLowerThan returns IsLowerThan:
	{IsLowerThan}
	(axe=STRING | 'pin'pinNumber=INT) 'is' 'lower' 'than' value=INT;





EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EBoolean returns ecore::EBoolean:
	'true' | 'false';