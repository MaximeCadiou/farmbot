/*
 * generated by Xtext 2.15.0
 */
package xtext.farmbot.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import farmbot.modeling.farmbot_modeling.Farmbot
import farmbot.modeling.farmbot_modeling.Instruction
import farmbot.modeling.farmbot_modeling.Command
import farmbot.modeling.farmbot_modeling.SequenceCommand
import farmbot.modeling.farmbot_modeling.SequenceInstruction
import farmbot.modeling.farmbot_modeling.BooleanExpression
import farmbot.modeling.farmbot_modeling.TurnOnDigital
import farmbot.modeling.farmbot_modeling.TurnOnAnalog
import farmbot.modeling.farmbot_modeling.TurnOff
import farmbot.modeling.farmbot_modeling.MoveRelative
import farmbot.modeling.farmbot_modeling.MoveAbsolute
import farmbot.modeling.farmbot_modeling.FindHome
import farmbot.modeling.farmbot_modeling.Sequence
import farmbot.modeling.farmbot_modeling.If
import farmbot.modeling.farmbot_modeling.ExecuteSequence
import farmbot.modeling.farmbot_modeling.Wait
import farmbot.modeling.farmbot_modeling.SendMessage
import farmbot.modeling.farmbot_modeling.RunFarmware
import farmbot.modeling.farmbot_modeling.TakePhoto
import farmbot.modeling.farmbot_modeling.Schedule
import farmbot.modeling.farmbot_modeling.ListSequences
import farmbot.modeling.farmbot_modeling.IsEqualTo
import farmbot.modeling.farmbot_modeling.IsGreaterThan
import farmbot.modeling.farmbot_modeling.IsNotEqualTo
import farmbot.modeling.farmbot_modeling.IsLowerThan
import farmbot.modeling.farmbot_modeling.Move
import farmbot.modeling.farmbot_modeling.ListScheduledEvents

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyFarmbotGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('farmbot/Farmbot.java',
			resource.allContents
				.filter(Farmbot)
				.head
				.compile)
	}
	
	def dispatch compile(Farmbot farmbot) ''' 
	    package farmbot;
	    
		import java.io.BufferedReader;
		import java.io.IOException;
		import java.io.InputStreamReader;
		import java.net.HttpURLConnection;
		import java.net.MalformedURLException;
		import java.net.URL;
		import org.json.JSONObject;
		import org.json.JSONArray;
		import org.json.JSONException;
	    
	    public class Farmbot {
		    static final String TOKEN = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ1bmtub3duIiwic3ViIjo0NDAwLCJpYXQiOjE1NDgxNTMzMjcsImp0aSI6IjQ3NzBlZWQ3LWVmMzMtNDM4NC1iNmJlLWVmY2IzNzg4Y2UzMCIsImlzcyI6Ii8vbXkuZmFybWJvdC5pbzo0NDMiLCJleHAiOjE1NTE2MDkzMjcsIm1xdHQiOiJicmlzay1iZWFyLnJtcS5jbG91ZGFtcXAuY29tIiwiYm90IjoiZGV2aWNlXzQzOTUiLCJ2aG9zdCI6InZiemN4c3FyIiwibXF0dF93cyI6IndzczovL2JyaXNrLWJlYXIucm1xLmNsb3VkYW1xcC5jb206NDQzL3dzL21xdHQiLCJvc191cGRhdGVfc2VydmVyIjoiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy9mYXJtYm90L2Zhcm1ib3Rfb3MvcmVsZWFzZXMvbGF0ZXN0IiwiZndfdXBkYXRlX3NlcnZlciI6IkRFUFJFQ0FURUQiLCJpbnRlcmltX2VtYWlsIjoiam9yZGhhbi5tYWRlY0BnbWFpbC5jb20iLCJiZXRhX29zX3VwZGF0ZV9zZXJ2ZXIiOiJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL0Zhcm1Cb3QvZmFybWJvdF9vcy9yZWxlYXNlcy8xNDU4MTg3MSJ9.WDBwreST76bU3MCybjV6WNY4EuZfcPuUzPcrNpZzpE448HmHwDjNrMTXJARostEVrafdVttlErA2B4AVJkuF9WFMCwJCu1wza6HyeucG8TBQLIrOQmunkIbXxzUKdXdb4A9egYlI24gupJha2CejpfhMj3ZWJiQsQ7gMK4vn5sAnETXimnumwtj8writ5uDsA5a74Gqur_kkRZEj_5YrsnCY9ggzWdkAvqizzdvjrI1fN3_LTFT_XrEYUbohECLCHZ-Qy3ibHQm6eMPFEv_4MVYHGg-yyYDBsc-M4itMLuIH_h7_hYbBuW_nQui7EdRR96v0cO0WBrOvswxczAQHiQ";
		    static final String API_URL = "https://my.farm.bot/api";
	     
	    	public static void main(String[] args) throws JSONException {
		        URL url;
		        HttpURLConnection con;
		        
		    	«FOR instruction:farmbot.instructions»
	            «instruction.compile»
	    	    «ENDFOR»
	    	}
	    }
	'''
	
	
	
	def dispatch compile(Instruction instruction) '''this expression is not supported: '''

	def dispatch compile(Command command) '''this expression is not supported: '''

	def dispatch compile(SequenceCommand sequenceCommad) '''this expression is not supported: '''

	def dispatch compile(SequenceInstruction sequenceInstruction) '''this expression is not supported: '''

	def dispatch compile(BooleanExpression booleanExpression) '''this expression is not supported: '''

	def dispatch compile(Move move) '''this expression is not supported: '''



	def dispatch compile(Sequence sequence) '''
	    String body = new JSONObject()
        .put("name", "«sequence.name»")
        .put("body", new JSONArray() 

		«FOR instruction:sequence.sequenceInstructions»
		.put(«instruction.compile»)
        «ENDFOR»

    	).toString();    

		System.out.println("\nCreating sequence «sequence.name»...");
        System.out.println(body);

        try {
			url = new URL(API_URL + "/sequences");
			con = (HttpURLConnection) url.openConnection();
	        con.setRequestMethod("POST");
	        
	        con.setRequestProperty("Content-Type", "application/json");
	        con.setRequestProperty("Authorization", TOKEN);
	        
	        con.setDoOutput(true);
	        con.getOutputStream().write(body.getBytes());
	        con.getOutputStream().flush();
	        con.getOutputStream().close();
	        
            System.out.println(con.getResponseMessage());
	    } catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	'''







	def dispatch compile(TurnOnDigital turnon)	'''
		new JSONObject()
			.put("kind", "write_pin")
			.put("args", new JSONObject()
				.put("pin_mode", 0)
				.put("pin_value", 1)
				.put("pin_number", «turnon.pin»)
			)
	'''
	
	def dispatch compile(TurnOnAnalog turnon)	'''
		new JSONObject()
			.put("kind", "write_pin")
			.put("args", new JSONObject()
				.put("pin_mode", 1)
				.put("pin_value", «turnon.value»)
				.put("pin_number", «turnon.pin»)
			)
	'''

	def dispatch compile(TurnOff turnoff) '''
		new JSONObject()
			.put("kind", "write_pin")
			.put("args", new JSONObject()
				.put("pin_mode", 0)
				.put("pin_value", 0)
				.put("pin_number", «turnoff.pin»)
			)
	'''







	def dispatch compile(MoveRelative move) '''
		new JSONObject()
			.put("kind", "move_relative")
			.put("args", new JSONObject()
				.put("speed", «move.speed»)
				.put("x", «move.x»)
				.put("y", «move.y»)
				.put("z", «move.z»)
			)
	'''

	def dispatch compile(MoveAbsolute move) '''
		new JSONObject()
			.put("kind", "move_absolute")
			.put("args", new JSONObject()
				.put("speed", «move.speed»)
				.put("offset", new JSONObject()
					.put("kind", "coordinate")
					.put("args", new JSONObject()
						.put("x", «move.x»)
						.put("y", «move.y»)
						.put("z", «move.z»)
					)
				)
				.put("location", new JSONObject()
					.put("kind", "coordinate")
					.put("args", new JSONObject()
						.put("x", «move.x»)
						.put("y", «move.y»)
						.put("z", «move.z»)
					)
				)
			)
	'''
	
	def dispatch compile(FindHome findHome)'''
		new JSONObject()
			.put("kind", "find_home")
			.put("args", new JSONObject()
				.put("speed", 100)
				.put("axis", "«findHome.axis»")
			)
	'''
	
	
	
	
	def dispatch compile(ExecuteSequence executeSequence) '''
		new JSONObject()
					.put("kind", "execute")
					.put("args", new JSONObject()
						.put("sequence_id", «executeSequence.id»)
					)
	'''

	def dispatch compile(Wait wait) '''
		new JSONObject()
			.put("kind", "wait")
			.put("args", new JSONObject()
				.put("milliseconds", «wait.duration»)
			)
	'''

	def dispatch compile(SendMessage message) '''
		new JSONObject()
			.put("kind", "send_message")
			.put("args", new JSONObject()
				.put("message", "«message.message»")
				.put("message_type", "«message.messageType»")
			)
	'''

	def dispatch compile(RunFarmware farmware) '''
		new JSONObject()
			.put("kind", "execute_script")
			.put("args", new JSONObject()
				.put("label", "«farmware.name»")
			)
	'''

	def dispatch compile(TakePhoto takePhoto) '''
		new JSONObject()
					.put("kind", "take_photo")
					.put("args", new JSONObject()
					)
	'''
	
	
	
	
	
	


	def dispatch compile(If ifExpression) '''
		new JSONObject()
					.put("kind", "_if")
					.put("args", new JSONObject()
						«ifExpression.booleanExpression.compile»
						.put("_then", new JSONObject()
							«IF ifExpression.getThen() !== null»
							.put("kind", "execute")
							.put("args", new JSONObject()
								.put("sequence_id", «ifExpression.getThen().id») 
							)
							«ELSE»
							.put("kind", "nothing")
							.put("args", new JSONObject())
							«ENDIF»
						)
						.put("_else", new JSONObject()
							«IF ifExpression.getElse() !== null»
							.put("kind", "execute")
							.put("args", new JSONObject()
								.put("sequence_id", «ifExpression.getElse().id») 
							)
							«ELSE»
							.put("kind", "nothing")
							.put("args", new JSONObject())
							«ENDIF»
						)
					)
	'''
	
	def dispatch compile(IsEqualTo isEqualTo) {
		var target = "";
		
		if (isEqualTo.axe !== null) {
			target = isEqualTo.axe;
		} else {
			target = "pin" + isEqualTo.pinNumber;
		}
		
		'''
			.put("rhs", «isEqualTo.value»)
			.put("op", "is")
			.put("lhs", "«target»")
		'''	
	}

	def dispatch compile(IsNotEqualTo isNotEqualTo) {
		var target = "";
		
		if (isNotEqualTo.axe !== null) {
			target = isNotEqualTo.axe;
		} else {
			target = "pin" + isNotEqualTo.pinNumber;
		}
		
		'''
			.put("rhs", «isNotEqualTo.value»)
			.put("op", "not")
			.put("lhs", "«target»")
		'''	
	}
	
	
	def dispatch compile(IsGreaterThan isGreaterThan) {
		var target = "";
		
		if (isGreaterThan.axe !== null) {
			target = isGreaterThan.axe;
		} else {
			target = "pin" + isGreaterThan.pinNumber;
		}
		
		'''
			.put("rhs", «isGreaterThan.value»)
			.put("op", ">")
			.put("lhs", "«target»")
		'''	
	}

	def dispatch compile(IsLowerThan isLowerThan) {
		var target = "";
		
		if (isLowerThan.axe !== null) {
			target = isLowerThan.axe;
		} else {
			target = "pin" + isLowerThan.pinNumber;
		}
		
		'''
			.put("rhs", «isLowerThan.value»)
			.put("op", "<")
			.put("lhs", "«target»")
		'''	
	}	
	
	
	
	
	
	
	def dispatch compile(Schedule schedule) '''
		System.out.println("I scheduled the sequence «schedule.sequence» on «schedule.startDate» at «schedule.startTime»");
		«IF schedule.repeat»
			System.out.println("It will repeat every «schedule.repeatFrequency» «schedule.repeatUnit» until «schedule.endDate» at «schedule.endTime»");
		«ENDIF»
	'''





	def dispatch compile(ListScheduledEvents listScheduledEvents) '''
        try {
        	System.out.println("\nFetching scheduled events...");
        	
			url = new URL(API_URL + "/farm_events");
			con = (HttpURLConnection) url.openConnection();
	        con.setRequestMethod("GET");
	        
	        con.setRequestProperty("Content-Type", "application/json");
	        con.setRequestProperty("Authorization", TOKEN);
	        
            BufferedReader br = new BufferedReader(new InputStreamReader((con.getInputStream())));
            StringBuilder events = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                events.append(line);
            }
            
            JSONArray eventsJson = new JSONArray(events.toString());
            JSONObject event;
            
            for (int i = 0; i < eventsJson.length(); i++) {
        	  event = eventsJson.getJSONObject(i);
        	  
        	  String start = "starts on " + event.get("start_time").toString();
        	  String end = "starts on " + event.get("end_time").toString();
        	  String repeat = Integer.valueOf(event.get("repeat").toString()) == 1 ? " repeat " + event.get("time_unit").toString() : " no repeat";
        	  
        	  System.out.println("Sequence " + event.get("executable_id").toString() + " : " + start + repeat);
        	}
	    } catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	 '''

	def dispatch compile(ListSequences listSequences) '''
        try {
        	System.out.println("\nFetching sequences...");
        	
			url = new URL(API_URL + "/sequences");
			con = (HttpURLConnection) url.openConnection();
	        con.setRequestMethod("GET");
	        
	        con.setRequestProperty("Content-Type", "application/json");
	        con.setRequestProperty("Authorization", TOKEN);
	        
            BufferedReader br = new BufferedReader(new InputStreamReader((con.getInputStream())));
            StringBuilder sequences = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                sequences.append(line);
            }
            
            JSONArray sequencesJson = new JSONArray(sequences.toString());
            JSONObject sequence;
            
            for (int i = 0; i < sequencesJson.length(); i++) {
        	  sequence = sequencesJson.getJSONObject(i);
        	  System.out.println(sequence.get("name").toString() + " (" + sequence.get("id").toString() + ")");
        	}
	    } catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	 '''
}
