/**
 * generated by Xtext 2.15.0
 */
package xtext.farmbot.formatting2;

import com.google.inject.Inject;
import farmbot.modeling.farmbot_modeling.Farmbot;
import farmbot.modeling.farmbot_modeling.Instruction;
import farmbot.modeling.farmbot_modeling.Sequence;
import farmbot.modeling.farmbot_modeling.SequenceInstruction;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import xtext.farmbot.services.MyFarmbotGrammarAccess;

@SuppressWarnings("all")
public class MyFarmbotFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyFarmbotGrammarAccess _myFarmbotGrammarAccess;
  
  protected void _format(final Farmbot farmbot, @Extension final IFormattableDocument document) {
    EList<Instruction> _instructions = farmbot.getInstructions();
    for (final Instruction instruction : _instructions) {
      document.<Instruction>format(instruction);
    }
  }
  
  protected void _format(final Sequence sequence, @Extension final IFormattableDocument document) {
    EList<SequenceInstruction> _sequenceInstructions = sequence.getSequenceInstructions();
    for (final SequenceInstruction sequenceInstruction : _sequenceInstructions) {
      document.<SequenceInstruction>format(sequenceInstruction);
    }
  }
  
  public void format(final Object sequence, final IFormattableDocument document) {
    if (sequence instanceof XtextResource) {
      _format((XtextResource)sequence, document);
      return;
    } else if (sequence instanceof Sequence) {
      _format((Sequence)sequence, document);
      return;
    } else if (sequence instanceof Farmbot) {
      _format((Farmbot)sequence, document);
      return;
    } else if (sequence instanceof EObject) {
      _format((EObject)sequence, document);
      return;
    } else if (sequence == null) {
      _format((Void)null, document);
      return;
    } else if (sequence != null) {
      _format(sequence, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(sequence, document).toString());
    }
  }
}
